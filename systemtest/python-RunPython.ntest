# -*-Perl-*-

# python-RunPython.ntest -
#
# ECPython
#
# Copyright (c) 2005-2010 Electric Cloud, Inc.
# All rights reserved

use strict;
use ECTest;
use ECSelenium;

 
# system tests


require "$::gTestFileDir/../../EC-Python/systemtest/python-common.ntest";


$::grunPythonCreated = 0;
$::gProjectImported = 0;

#stores the result wheter the result of the procedure is success or error
my $outcome = "";




sub importProject() {
    assertOK($::N->import(
                     { file =>"$::gTestFileDir/pythonTests.xml",
               path  => "/projects/pythonTest",
               force => 1
             } ), "import runPythonCommandLine");
   
    assertOK($::N->getProcedure("pythonTest", "RunPythonFromFile"),"RunPythonFromFile procedure exists");
    assertOK($::N->getProcedure("pythonTest", "RunPythonFromTextArea"),"RunPythonFromTextArea procedure exists");
   
    $::gProjectImported = 1;
}



sub doSetup() {

    if(! $::gProjectImported) {
        importProject();
    }

}

#RunPythonFromFile 

#Test a python command with a correct syntax 

 ntest "RunPythonFromFile", {}, sub {
      doSetup();
      # run test job
     
         my $xpath = $::N->runProcedure("pythonTest", 
                 { procedureName => "RunPythonFromFile",
                 pollInterval  => '1',
                 timeout => 30,
                      actualParameter => [
                     
                     ]
          });
                 # make sure it finished
             my $jobId = 0;
             my $status = "";
             
             assertOK($xpath, "runProcedure with errors");
             if ($xpath) {
                 $jobId  = $xpath->findvalue("//jobId");
                 $status = $xpath->findvalue("//status");
                 $outcome = $xpath->findvalue("//outcome");
         
                 assertTrue($jobId && $jobId ne "",'valid job id');
                 
                 #abort if job did not finish
                 if ($status ne "completed") {
                     assertOK($::N->abortJob($jobId, {force => 1}));
                 }
             }
 
     # get the job details
     $xpath = $::N->getJobDetails($jobId);
     
     # get the value of the pythonCommandLine property
     my $cmd = $xpath->findvalue("//property[propertyName='pythonCommandLine']/value");
 
     # make sure the $cmd is what was expected
     assertEq('"python" "C:\Python27\hello.py"', $cmd, "python command line");
     
  };


#RunPythonFromTextArea 

#Test a python command with a incorrect syntax 

 ntest "RunPythonFromTextArea", {}, sub {
      doSetup();
      # run test job
     
         my $xpath = $::N->runProcedure("pythonTest", 
                 { procedureName => "RunPythonFromTextArea",
                 pollInterval  => '1',
                 timeout => 30,
                      actualParameter => [
                     
                     ]
          });
                 # make sure it finished
             my $jobId = 0;
             my $status = "";
             
             assertOK($xpath, "runProcedure with errors");
             if ($xpath) {
                 $jobId  = $xpath->findvalue("//jobId");
                 $status = $xpath->findvalue("//status");
                 $outcome = $xpath->findvalue("//outcome");
         
                 assertTrue($jobId && $jobId ne "",'valid job id');
                 
                 #abort if job did not finish
                 if ($status ne "completed") {
                     assertOK($::N->abortJob($jobId, {force => 1}));
                 }
             }
 
     # get the job details
     $xpath = $::N->getJobDetails($jobId);

     # get the value of the pythonCommandLine property
     my $cmd = $xpath->findvalue("//property[propertyName='pythonCommandLine']/value");
 
     # make sure the $cmd is what was expected
     assertEq('"C:\Python27\python" file.py', $cmd, "python command line");
     
  };
